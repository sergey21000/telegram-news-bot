import os
import logging
import asyncio
import aioimaplib
from pathlib import Path
from datetime import datetime
from dataclasses import dataclass

import aiohttp

import email
import email.message
from email.header import decode_header
from email import utils

import pytz
from pytz.tzinfo import BaseTzInfo

from bs4 import BeautifulSoup

from dotenv import load_dotenv
load_dotenv()

from configs.base import SendReminderConfig, SendEmailConfig
from configs.chats_settings import SendSettingsConfig

if SendSettingsConfig.send_pdf_to_proglib:
    from weasyprint import HTML, CSS
    logging.getLogger('weasyprint').setLevel(logging.ERROR)


logger = logging.getLogger(__name__)


@dataclass
class Message:
    '''–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã'''
    email_message: email.message.Message
    email_sender: str
    email_num: int
    email_datetime: datetime


class EmailParser:
    '''–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫'''
    
    # ========================= COMMON UTILS ===============================

    @classmethod
    async def get_last_email_message(cls, email_config: SendEmailConfig) -> Message:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏—Å—å–º–∞ –∏–∑ –ø–∞–ø–∫–∏ –ø–æ—á—Ç—ã email_config.mail_folder'''
        imap_client = aioimaplib.IMAP4_SSL(host='imap.mail.ru')
        await imap_client.wait_hello_from_server()
        await imap_client.login(os.getenv('MAIL_ADDRESS'), os.getenv('MAIL_PASSWORD'))

        res, data = await imap_client.select(email_config.mail_folder)
        if res != 'OK':
            await imap_client.logout()
            raise Exception(f'–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –ø–æ—á—Ç—ã {email_config.mail_folder}')

        res, numbers = await imap_client.search('ALL')
        if len(numbers) == 0:
            await imap_client.logout()
            raise Exception(f'–í –ø–∞–ø–∫–µ –ø–æ—á—Ç—ã {email_config.mail_folder} –Ω–µ—Ç –ø–∏—Å–µ–º')

        email_numbers = numbers[0].split()
        while True:
            if len(email_numbers) == 0:
                await imap_client.logout()
                raise Exception(f'–ù–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∏—Å—å–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º {email_config.target_email_sender}')

            email_num = email_numbers.pop(-1).decode('utf-8')
            res, msg = await imap_client.fetch(email_num, '(RFC822)')
            email_body = msg[1]
            email_message = email.message_from_bytes(email_body)
            email_sender = cls.get_email_sender(email_message)
            if email_config.target_email_sender in email_sender:
                break
            else:
                continue

        email_datetime = cls.get_email_datetime(email_message, email_config.schedule_kwargs_config.timezone)
        message = Message(
            email_message=email_message,
            email_sender=email_sender,
            email_num=email_num,
            email_datetime=email_datetime,
            )
        await imap_client.logout()
        return message


    @classmethod
    async def get_available_email_message(cls, email_config: SendEmailConfig) -> Message:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Å—å–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º email_config.target_email_sender, –∫–æ—Ç–æ—Ä–æ–µ –µ—â–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'''
        message = await cls.get_last_email_message(email_config)
        if message.email_num in email_config.email_numbers:
            raise Exception(f'–ü–∏—Å—å–º–æ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {message.email_num} –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è {email_config.target_email_sender} —É–∂–µ –µ—Å—Ç—å –≤ –ë–î')
        current_datetime = datetime.now(email_config.schedule_kwargs_config.timezone)
        if message.email_datetime.date() < current_datetime.date():
            raise Exception(f'–ü–∏—Å—å–º–æ –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è {email_config.target_email_sender} '
                            f'—Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã ({message.email_datetime.date()} < {current_datetime.date()})')
        email_config.email_numbers[message.email_num] = True
        return message


    @staticmethod
    def get_email_sender(email_message: email.message.Message) -> str:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–∏—Å—å–º–∞ –∏–∑ –ø–∏—Å—å–º–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã'''
        from_ = email_message.get('From')
        decoded_header = decode_header(from_)
        email_sender = ''
        for part, encoding in decoded_header:
            if isinstance(part, bytes):
                email_sender += part.decode(encoding or 'utf-8')
            else:
                email_sender += part
        return email_sender


    @staticmethod
    def get_email_datetime(email_message: email.message.Message, timezone: BaseTzInfo) -> str:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å—å–º–∞ –∏–∑ –ø–∏—Å—å–º–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã'''
        datestring = email_message['date']
        datetime_obj = utils.parsedate_to_datetime(datestring)
        email_datetime = datetime_obj.astimezone(timezone)
        return email_datetime


    @staticmethod
    def get_content_from_email_message(email_message: email.message.Message, to_html: bool) -> str | None:
        '''–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ html —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑ –ø–∏—Å—å–º–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã'''
        content = None
        content_type = 'text/html' if to_html else 'text/plain'
        if email_message.is_multipart():
            for part in email_message.walk():
                if part.get_content_type() == content_type:
                    content = part.get_payload(decode=True).decode()
                    break
        elif email_message.get_content_type() == content_type:
            content = email_message.get_payload(decode=True).decode()
        return content

    # ======================== PROGLIB UTILS ==================================

    @staticmethod
    def get_web_link_from_html(html_content: str, search_string: str) -> str:
        '''–ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º search_string –∏–∑ html —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ'''
        soup = BeautifulSoup(html_content, 'html.parser')
        web_link = soup.find('a', string=search_string)
        if not web_link:
            raise Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Å—Å—ã–ª–∫—É –∏–∑ –ø–∏—Å—å–º–∞')
        web_link = web_link['href']
        return web_link

    # ======================== HABR UTILS ==================================

    @classmethod
    async def get_text_from_habr_message(cls, message: Message) -> str:
        '''–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –ø–∏—Å—å–º–∞ –æ—Ç –•–∞–±—Ä'''
        email_text = cls.get_content_from_email_message(message.email_message, to_html=False)
        emails_list = email_text.split('\r\n\r\n')
        emails_list = emails_list[2:-6]
        message_to_remove = '\r\n–ë—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π\r\n---'
        if message_to_remove in emails_list:
            emails_list.remove(message_to_remove)
        message_to_send = f'<u><b>üì® –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å—Ç–∞—Ç–µ–π –æ—Ç –•–∞–±—Ä {message.email_datetime.date()}</b></u>\n\n'
        for email_msg in emails_list:
            if 'https://' in email_msg:
                email_title, email_link = email_msg.split('https://')
                email_title = email_title.strip()
                email_link = 'https://' + email_link.strip()
                message_to_send += f'üì∞ <b>{email_title}</b>\n'
                message_to_send += f'<a href="{email_link}">üîó –ß–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é</a>\n\n'
        return message_to_send

    # ========================= GENERAL UTILS ======================

    @classmethod
    async def get_proglib_send(cls, email_config: SendEmailConfig) -> tuple[str, str]:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –ø–∏—Å—å–º–∞ –æ—Ç Proglib (PDF –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç —Å –Ω–æ–≤–æ—Å—Ç—å—é)'''
        message = await cls.get_available_email_message(email_config)
        html_content = cls.get_content_from_email_message(message.email_message, to_html=True)
        web_link = cls.get_web_link_from_html(html_content, search_string='–í–µ–±-–≤–µ—Ä—Å–∏—è')
        
        pdf_file_name = None
        if SendSettingsConfig.send_pdf_to_proglib:
            pdf_file_name = await UrlToPdf.pdf_from_web_link(web_link)
            
        message_to_send = f'<u><b>üì® –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ò–ò –Ω–æ–≤–æc—Ç–µ–π –æ—Ç Proglib AI {message.email_datetime.date()}</b></u>\n\n'
        message_to_send += f'<a href="{web_link}">üîó –í–µ–±-–≤–µ—Ä—Å–∏—è</a>\n'
        # message_to_send += '\n#proglib—Ä–∞—Å—Å—ã–ª–∫–∞'
        return message_to_send, pdf_file_name


    @classmethod
    async def get_habr_send(cls, email_config: SendEmailConfig) -> str:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –ø–∏—Å—å–º–∞ –æ—Ç –•–∞–±—Ä'''
        message = await cls.get_available_email_message(email_config)
        message_to_send = await cls.get_text_from_habr_message(message)
        return message_to_send


    @staticmethod
    async def get_reminder_send(reminder_config: SendReminderConfig) -> str:
        '''–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ message_to_send –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'''
        return reminder_config.message_to_send


# ================= HTML TO PDF ====================================

class UrlToPdf:
    '''–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Web-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ PDF'''
    @staticmethod
    async def html_from_url(web_link: str) -> str:
        '''–ü–æ–ª—É—á–∞–µ—Ç HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ URL'''
        async with aiohttp.ClientSession() as session:
            async with session.get(web_link) as response:
                response.raise_for_status()
                return await response.text()


    @staticmethod
    def clean_html(html_content: str) -> str:
        '''–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ HTML –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç Proglib'''
        slice_indx = html_content.find('class="row row-3"')
        if slice_indx == -1:
            logger.warning('–ú–∞—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ HTML –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return html_content
        end_html = '<!-- End -->\n</body>\n</html>'
        cleaned_html = html_content[:slice_indx - 62] + end_html
        return cleaned_html


    @staticmethod
    def html_to_pdf(html_content: str, pdf_file_name: str, css: str | None) -> None:
        '''–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ HTML –≤ PDF'''
        stylesheets = [] if css is None else [css]
        HTML(string=html_content).write_pdf(target=pdf_file_name, stylesheets=stylesheets)


    @classmethod
    async def pdf_from_web_link(cls, web_link: str, css: str = None) -> str | None:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ HTML –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –µ–≥–æ –≤ PDF'''
        pdf_file_name = 'news.pdf'
        try:
            html_content = await cls.html_from_url(web_link)
        except Exception as ex:
            msg = f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HTML –∏–∑ URL {web_link}\n–ö–æ–¥ –æ—à–∏–±–∫–∏:\n{ex}'
            logger.error(msg, exc_info=True)
            return None
        try:
            cleaned_html = cls.clean_html(html_content)
        except Exception as ex:
            msg = f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ —Å—Å—ã–ª–∫–∏ {web_link}\n–ö–æ–¥ –æ—à–∏–±–∫–∏:\n{ex}'
            logger.warning(msg, exc_info=True)
            cleaned_html = html_content
        try:
            await asyncio.to_thread(cls.html_to_pdf, cleaned_html, pdf_file_name, css)
        except Exception as ex:
            msg = f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å HTML –≤ PDF –∏–∑ URL {web_link}\n–ö–æ–¥ –æ—à–∏–±–∫–∏:\n{ex}'
            logger.error(msg, exc_info=True)
            return None
        return pdf_file_name
